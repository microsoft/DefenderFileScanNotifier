// <copyright file="MalwareScannerHost.cs" company="Microsoft Corporation">
// Copyright (c) Microsoft Corporation. All rights reserved.
// </copyright>

// Default URL for triggering event grid function in the local environment.
// http://localhost:7071/runtime/webhooks/EventGrid?functionName={functionname}
using DefenderFileScanNotifier.Function.Core.CoreConstants;

namespace DefenderFileScanNotifier.Function
{
    using System;
    using Microsoft.Azure.WebJobs;
    using Microsoft.Azure.WebJobs.Extensions.EventGrid;
    using Azure.Messaging.EventGrid;
    using System.Text.Json;
    using Microsoft.Extensions.Options;
    using Azure.Identity;
    using Azure.Storage.Blobs;
    using System.Threading.Tasks;
    using System.Collections.Generic;
    using System.Diagnostics;
    using Microsoft.Azure.WebJobs.Extensions.SignalRService;
    using DefenderFileScanNotifier.Function.Core.Logger;
    using Guard=DefenderFileScanNotifier.Function.Core.ValidationHelper.GuardHelper;
    using CoreConstants = DefenderFileScanNotifier.Function.Core.CoreConstants.CoreConstants;
    using DefenderFileScanNotifier.Function.Core.Services;

    /// <summary>
    /// The <see cref="MalwareScannerHost"/> defines the azure functions.
    /// </summary>
    public class MalwareScannerHost
    {
        /// <summary>
        /// The logger object.
        /// </summary>
        private readonly IApplicationInsightsLogger logger;

        /// <summary>
        /// The Malware scan properties configuration.
        /// </summary>
        private readonly IMalwareScannerManager malwareScannerManager;

        public MalwareScannerHost(IMalwareScannerManager malwareScannerManager, IApplicationInsightsLogger logger)
        {
            Guard.ThrowIfInvalid(nameof(logger), logger);
            Guard.ThrowIfInvalid(nameof(malwareScannerManager), malwareScannerManager);
            this.logger = logger;
            this.malwareScannerManager = malwareScannerManager;
        }

        [FunctionName("MalwareScanner")]
        public async Task MalwareScannerRunAsync([EventGridTrigger] EventGridEvent eventGridEvent, [SignalR(HubName = "%AzureSignalRHubName%")] IAsyncCollector<SignalRMessage> signalRMessages)
        {
            Guard.ThrowIfInvalid(nameof(eventGridEvent), eventGridEvent);
            this.logger.TraceInformation($"Started AzFunction: {nameof(this.MalwareScannerRunAsync)} for event id: {eventGridEvent.Id}, data: {eventGridEvent.Data} at : {DateTime.UtcNow}.");
            Stopwatch stopwatch = Stopwatch.StartNew();
            try
            {
                await this.malwareScannerManager.MoveBlobItemToMainContainerAsync(eventGridEvent, signalRMessages).ConfigureAwait(false);
                this.logger.TraceInformation($"Ended AzFunction: {nameof(this.MalwareScannerRunAsync)} for event id: {eventGridEvent.Id} at : {DateTime.UtcNow}.");
            }
            catch (Exception ex)
            {
                this.logger.TraceError($"Error occurred while processing request {ex.Message}");
                this.logger.WriteException(ex, new Dictionary<string, string>
                    {
                        { CoreConstants.ClassKey, nameof(MalwareScannerHost) },
                        { CoreConstants.MethodKey, nameof(this.MalwareScannerRunAsync) },
                        { CoreConstants.ExceptionMessageKey, $"Unexpected exception with the message {ex.Message}" },
                        { CoreConstants.InnerExceptionMessageKey, ex.InnerException?.Message ?? string.Empty },
                        { CoreConstants.EventId,eventGridEvent.Id },
                        { CoreConstants.EventSubject,eventGridEvent.Subject },
                        { CoreConstants.StackTraceConstant,ex.StackTrace??"No stack trace available." },

                    });
                throw;
            }
            finally
            {
                stopwatch.Stop();
                Dictionary<string, double> traceProps = new Dictionary<string, double>();
                traceProps.Add(CoreConstants.MalwareProcessingTotalTimeCustomEvent, stopwatch.ElapsedMilliseconds);
                this.logger.WriteCustomEvent(CoreConstants.MalwareProcessingTotalTimeCustomEvent, new Dictionary<string, string>
                            {
                                { CoreConstants.ClassKey, nameof(MalwareScannerHost) },
                                { CoreConstants.MethodKey, nameof(this.MalwareScannerRunAsync) },
                                { CoreConstants.EventId,eventGridEvent.Id },
                                { CoreConstants.EventSubject,eventGridEvent.Subject },
                                { CoreConstants.MalwareProcessingTotalTimeCustomEvent,stopwatch.ElapsedMilliseconds.ToString() },
                            },
                            traceProps);
            }
        }
    }
}
