param featureName string
param subFeatureName string
@allowed([
  'westus2'
  'eastus'
])
param deploymentLocation string
@allowed([
  'ui'
  'service'
])
param applicationType string
@allowed([
  'ppe'
  'prod'
  'perf'
])
param environment string
param shortLocation string
param commonLogAnalyticsWorkspace string
param appconfigName string
param kvName string
param appConfigReadRoleDefName string

param blobContainers array
param signalrkvconnectionSecretName string
param signalRname string
@allowed([
  1
  2
  5
  10
  20
  50
  100
])
param signalRcapacity int = 1
param storageAccountNameFile_Variable string
param storageAccountName_Variable string
param primaryDeploymentLocation string
param storageAccountSKU string
param malwareScannerFunctionAppName string
param malwareScannerFunctionAppSkuName string
param malwareScannerFunctionAppSkuTier string
param servicesCertificatePermissionList array
param servicesSecretPermissionList array
var envString = environment != 'prod' ? 'PRE-PRODUCTION' : 'PRODUCTION'

var tagsObject = {
  'Environment': environment
  'FeatureName': featureName
  'Env': envString
}

resource appConfig 'Microsoft.AppConfiguration/configurationStores@2020-06-01' existing = {
  name: appconfigName
  scope: resourceGroup()
}

resource kvConfigInSameRg 'Microsoft.KeyVault/vaults@2019-09-01' existing = {
  name: kvName
  scope: resourceGroup()

}

resource logAnalyticsWorkplace 'Microsoft.OperationalInsights/workspaces@2021-06-01' existing = {
  name: commonLogAnalyticsWorkspace
  scope: resourceGroup()
}

module appInsightsDeployment '../../modules/monitoring/appInsights.bicep' = {
  name: 'appInsights'
  params: {
    applicationType: applicationType
    deploymentLocation: deploymentLocation
    environment: environment
    subFeatureName: subFeatureName
    tagsObject: tagsObject
    workspaceRescId: logAnalyticsWorkplace.id
    featureName:featureName
  }
  dependsOn: [
    logAnalyticsWorkplace
  ]
}

module malwarescannerFunctionApp '../../modules/webapp/functionApp.bicep' = {
  name: 'MalwareScannerFunctionApp'
  params: {
    appConfigReadRoleDefName: appConfigReadRoleDefName
    appConfigName: appconfigName
    functionAppName: malwareScannerFunctionAppName
    location: deploymentLocation
    env: environment
    tags: tagsObject
    appServicePlanName: 'dfsn${malwareScannerFunctionAppName}${shortLocation}srvcplan'
    skuName: malwareScannerFunctionAppSkuName
    skuTier: malwareScannerFunctionAppSkuTier
    shortLocation:shortLocation
    featureName:featureName
  }
  dependsOn: [
    appConfig
  ]
}

module updatesupportFunctionAppSetting '../../modules/webapp/functionAppSettingsWithStorage.bicep' = {
  name: 'updateFunctionAppSetting'
  params: {
    rootFunctionName: 'malwareScannerfn'
    functionAppName: malwarescannerFunctionApp.outputs.functionAppName
    storageAccountName: storageAccountName_Variable
    appInsightKey: appInsightsDeployment.outputs.appInsightInsKey
    appConfigName: appconfigName
    executionEnv: environment
    location: deploymentLocation
    tags: tagsObject
    keyVaultName: kvName
    signalrkvconnectionSecretName:signalrkvconnectionSecretName
  }
  dependsOn: [
    malwarescannerFunctionApp
    appInsightsDeployment
    appendAccessPolicy
  ]
}

var keyvaultAccessObjectIds = [
  {
    'key': malwarescannerFunctionApp.outputs.functionPrincipalIdentity
    'type': 'funtionAppMSIClientId'
  }
]

module appendAccessPolicy '../../modules/configurationstore/keyVaultAddAccessPolicy.bicep' = {
  name: 'appendSupportAccessPolicy'
  params: {
    certificatePermissionList: servicesCertificatePermissionList
    secretPermissionList: servicesSecretPermissionList

    keyVaultName: kvName
    objectIds: keyvaultAccessObjectIds
  }
  dependsOn: [
    kvConfigInSameRg
    malwarescannerFunctionApp
  ]
}

module signalRDeployment '../../modules/webapp/signalrService.bicep'={
  name:'signalRDeployment'
  params:{
    location:primaryDeploymentLocation
    name:signalRname
    capacity:signalRcapacity
    tags:tagsObject
    subFeatureName: subFeatureName
    signalrkvconnectionSecretName:signalrkvconnectionSecretName
    keyVaultName:kvName
    featureName:featureName
  }
}

module dfsnProcessorStorageAccount '../../modules/storage/storageaccount-prod.bicep' = {
  name: 'dfsnProcessorStorageAccount'
  params: {
    applicationType: ''
    deploymentLocation: primaryDeploymentLocation
    environment: environment
    subFeatureName: subFeatureName
    tags: tagsObject
    storageAccountSKU: storageAccountSKU
    blobContainers: blobContainers
    executionEnv: environment
    location: primaryDeploymentLocation
    preferreddStorageAccountName: storageAccountNameFile_Variable
    featureName:featureName
  }
}

module createContainer '../../modules/storage/blobcontainers.bicep' = {
  name: 'createcontainers'
   params: {
      storageAccountName: dfsnProcessorStorageAccount.outputs.storageAccountName
       blobContainers: blobContainers
   }
   dependsOn:[
    dfsnProcessorStorageAccount
   ]
 }

resource topic 'Microsoft.EventGrid/topics@2022-06-15' = {
  name: 'ScanResults-${dfsnProcessorStorageAccount.name}'
  location: deploymentLocation
  dependsOn: [
    dfsnProcessorStorageAccount
  ]
}