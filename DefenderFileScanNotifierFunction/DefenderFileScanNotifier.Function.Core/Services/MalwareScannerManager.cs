// <copyright file="MalwareScannerManager.cs" company="Microsoft Corporation">
// Copyright (c) Microsoft Corporation. All rights reserved.
// </copyright>

using DefenderFileScanNotifier.Function.Core.ValidationHelper;

namespace DefenderFileScanNotifier.Function.Core.Services
{
    using Azure.Messaging.EventGrid;
    using Azure.Storage.Blobs;

    using DefenderFileScanNotifier.Function.Core.CoreConstants;
    using DefenderFileScanNotifier.Function.Core.Logger;

    using Microsoft.Azure.WebJobs;
    using Microsoft.Azure.WebJobs.Extensions.SignalRService;
    using Microsoft.Extensions.Options;
    using Microsoft.Extensions.Primitives;
        
    using Newtonsoft.Json;

    using System;
    using System.Text;
    using System.Text.Json;

    using Guard = GuardHelper;
    /// <summary>
    /// The Malware scanner manager.
    /// </summary>
    public class MalwareScannerManager : IMalwareScannerManager
    {
        /// <summary>
        /// The logger object.
        /// </summary>
        private readonly IApplicationInsightsLogger logger;

        /// <summary>
        /// The Malware scan properties configuration.
        /// </summary>
        private readonly MalwareScannerConfigs malwareScannerConfigs;

        /// <summary>
        /// The Malware scan properties configuration.
        /// </summary>
        private readonly List<MalwareScannerContainerMapper>? malwareScannerContainerMappers;

        /// <summary>
        /// The Malware scan allowed event types.
        /// </summary>
        private readonly string[]? allowedEventTypes;

        /// <summary>
        /// The Malware scan allowed event types.
        /// </summary>
        private readonly IBlobClientRepository blobClientRepository;

        /// <summary>
        /// Initializes a new instance of the <see cref="MalwareScannerManager"/> class.
        /// </summary>
        /// <param name="malwareScannerConfigs">The malware scanner configurations.</param>
        /// <param name="IBlobClientRepository">The BLOB Repository.</param>
        /// <param name="logger">The logger</param>

        public MalwareScannerManager(IOptionsMonitor<MalwareScannerConfigs> malwareScannerConfigs, IBlobClientRepository blobClientRepository, IApplicationInsightsLogger logger)
        {
            Guard.ThrowIfInvalid(nameof(logger), logger);
            Guard.ThrowIfInvalid(nameof(malwareScannerConfigs), malwareScannerConfigs);
            Guard.ThrowIfInvalid(nameof(malwareScannerConfigs), malwareScannerConfigs.CurrentValue);
            Guard.ThrowIfInvalid(nameof(malwareScannerConfigs), malwareScannerConfigs.CurrentValue.ScannerContainerMapping);
            Guard.ThrowIfInvalid(nameof(malwareScannerConfigs), malwareScannerConfigs.CurrentValue.AntimalwareScanEventTypes);
            this.logger = logger;
            this.malwareScannerConfigs = malwareScannerConfigs.CurrentValue;
            malwareScannerContainerMappers = JsonConvert.DeserializeObject<List<MalwareScannerContainerMapper>>(this.malwareScannerConfigs.ScannerContainerMapping);
            allowedEventTypes = this.malwareScannerConfigs?.AntimalwareScanEventTypes?.Split(',');
            this.blobClientRepository = blobClientRepository;
        }

        ///<inheritdoc/>
        public async Task MoveBlobItemToMainContainerAsync(EventGridEvent eventGridEvent, IAsyncCollector<SignalRMessage> signalRMessages)
        {
            Guard.ThrowIfInvalid(nameof(eventGridEvent), eventGridEvent);

            logger.TraceInformation($"Started {nameof(this.MoveBlobItemToMainContainerAsync)} method for event id: {eventGridEvent.Id}, data: {eventGridEvent.Data} at : {DateTime.UtcNow}.");
            if (allowedEventTypes == null || !allowedEventTypes.Contains(eventGridEvent.EventType))
            {
                logger.TraceInformation($"Event type is not an {malwareScannerConfigs.AntimalwareScanEventTypes} event, event type:{eventGridEvent.EventType} for event id: {eventGridEvent.Id}");
                return;
            }

            var storageAccountName = eventGridEvent?.Subject?.Split('/');//[^1];
            if (storageAccountName == null || storageAccountName.Length < 4)
            {
                logger.TraceInformation($"storage account name is not valid {eventGridEvent?.Subject} for event id: {eventGridEvent.Id}");
                return;
            }

            string containerName = storageAccountName[3];
            logger.TraceInformation($"Received new scan result for storage {containerName} for event id: {eventGridEvent?.Id}");
            var decodedEventData = JsonDocument.Parse(eventGridEvent?.Data).RootElement.ToString();
            var eventData = JsonDocument.Parse(decodedEventData).RootElement;
            var verdict = eventData.GetProperty("scanResultType").GetString();
            var blobUriString = eventData.GetProperty("blobUri").GetString();
            string blobsIdentifier = "blobs/";
            string[] blobFilePath = (eventGridEvent?.Subject.Substring((int)(eventGridEvent?.Subject?.IndexOf(blobsIdentifier) + blobsIdentifier.Length))).Split("/");
            StringBuilder sb = new StringBuilder();
            for (int blobItemCount = 0; blobItemCount <= blobFilePath.Length - 2; blobItemCount++)
            {
                sb.Append(blobFilePath[blobItemCount].Trim());
                sb.Append("_");
            }

            if (!string.IsNullOrWhiteSpace(blobFilePath[blobFilePath.Length - 1]))
            {
                sb.Append(blobFilePath[blobFilePath.Length - 1].Substring(0, blobFilePath[blobFilePath.Length - 1].LastIndexOf('.')));
            }

            logger.TraceInformation($"SignalR sent event message target name is {sb.ToString()} for event id: {eventGridEvent?.Id}");

            if (verdict == null || blobUriString == null)
            {
                await signalRMessages.AddAsync(new SignalRMessage
                {
                    Target = sb.ToString(),
                    Arguments = new[] { CoreConstants.SignalRNotificationStatus.Failed.ToString() }
                });
                logger.TraceError($"Event data doesn't contain 'verdict' or 'blobUri' fields for event id: {eventGridEvent?.Id}");
                throw new ArgumentException($"Event data doesn't contain 'verdict' or 'blobUri' fields for event id: {eventGridEvent?.Id}");
            }

            if (verdict == malwareScannerConfigs.AntimalwareScanSuccessIdentifier)
            {
                await signalRMessages.AddAsync(new SignalRMessage
                {
                    Target = sb.ToString(),
                    Arguments = new[] { CoreConstants.SignalRNotificationStatus.Success.ToString() },
                });

                var blobUri = new Uri(blobUriString);
                try
                {
                    await MoveBlobAsync(blobUri, containerName, eventGridEvent.Id).ConfigureAwait(false);
                }
                catch (Exception ex)
                {
                    logger.TraceError($"Error occurred while processing request {ex.Message}");
                    logger.WriteException(ex, new Dictionary<string, string>
                    {
                        { CoreConstants.ClassKey, nameof(MalwareScannerManager) },
                        { CoreConstants.MethodKey, nameof(this.MoveBlobItemToMainContainerAsync) },
                        { CoreConstants.ExceptionMessageKey, $"Unexpected exception with the message {ex.Message}" },
                        { CoreConstants.InnerExceptionMessageKey, ex.InnerException?.Message ?? string.Empty },
                        { CoreConstants.EventId,eventGridEvent.Id },
                        { CoreConstants.EventSubject,eventGridEvent.Subject },
                        { CoreConstants.StackTraceConstant,ex.StackTrace??"No stack trace available." },

                    });
                    throw;
                }
            }
            else
            {
                await signalRMessages.AddAsync(new SignalRMessage
                {
                    Target = sb.ToString(),
                    Arguments = new[] { CoreConstants.SignalRNotificationStatus.Failed.ToString() }
                });
            }
        }

        /// <summary>
        /// Main business logic to move data from source container to destination container based on configuration.
        /// </summary>
        /// <param name="blobUri">The source BLOB URI.</param>
        /// <param name="sourceContainer">The source container.</param>
        /// <param name="eventId">The event id.</param>
        /// <returns>The task.</returns>
        /// <exception cref="Exception">returns exception on failure.</exception>
        private async Task MoveBlobAsync(Uri blobUri, string sourceContainer, string eventId)
        {
            logger.TraceInformation($"{nameof(this.MoveBlobAsync)} method started for event id {eventId}");
            var blobUriBuilder = new BlobUriBuilder(blobUri);
            MalwareScannerContainerMapper? destinationConfig = malwareScannerContainerMappers?.Where(x => x.sourceBlobContainerName == sourceContainer)?.FirstOrDefault();
            if (destinationConfig == null)
            {
                logger.TraceError($"{CoreConstants.MalwareContainerMappingConfigMissedException} for blob {blobUri} and event id {eventId}");
                throw new Exception(CoreConstants.MalwareContainerMappingConfigMissedException);
            }
            string blobName = blobUriBuilder.BlobName;
            await this.blobClientRepository.StartCopyFromUriAsync(destinationConfig, sourceContainer, blobName, eventId, malwareScannerConfigs.SourceBlobReadSasTokenPeriodInMinutes, blobUri).ConfigureAwait(false);
            logger.TraceInformation($"MoveBlob: blob moved successfully for event id {eventId}");
        }
    }
}